SOLID principles
    source : Pluralsight - SOLID software design principles in java 8.

    s - Single Responsibility Principle :
        class should be having one and only one responsibility. there should be only one type of reason to change.
        example - business logic, user interface, persistance, logs, users.
        makes code easier to understand, fix, maintain.
        classes are less coupled and more resilient to change.
        
    o - Open-Closed Principle :
        classes should be open for extension but closed for modification.
        inheritance/ lose coupling/ separate evolution/strategy pattern.
        changing requirements are inevitable. so to add new functionality don't modify existing logic extend existing code to add new functionality.
        
    l - Liskov Substitution Principle :
        parent classes should be easily substituted with their child classes without blowing up the application.
        any object of a type must be substitutable by objects of a derived type without altering the correctness of that program.
        "if it looks like a duck, quacks like a duck, but needs batteries then you probably have the wrong abstraction" - SOLID motivation poster

    
    i - Interface Segregation Principle :
        many client specific interfaces are better than one general interface.
        client should not be forced to depend on methods that they do not use.
        reduce dependency by separating interfaces and implementing required interfaces to achieve same results.
        isp implementation results in stronger/strengthens srp and lsp.

    d - Dependency Inversion Principle :
        classes should depend on abstraction but not on concretion.
        high level modules should not depend on low level modules; both should depend on abstraction.
        abstraction should not depend on details; details should depend upon abstraction.
        dependency injection DI - 
        Inversion of control IoC -



Python
    First class function :

    Higher order function :

    Lambda function :

    File operations :

    Iterator :

    Generators :

    Decorators :

    Sql :

    OOP - 
        Dunder methods :


JavaScript
    Conversion and coercion :

    Hoisting :

    Array destructuring :

    Object destructuring :

    Spread operator :

    Rest function :

    Call, bind, apply :

    IIFE :

    Closures :

    Flat  :

    Flat map :

    OOP :

    Promise :

    Fetch :

    Async / awaits :

    Flask :

